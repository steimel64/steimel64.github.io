apropos("confusion")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("corrplot")
install.packages("e1071")
install.packages("lattice")
apropos("confusion")
RSiteSearch("confusion", restrict="functions")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
data
segData <- subset(segmentationOriginal, Case == "Train")
segData
View(segData)
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1-3)]
statusColNum <- grep("Status", names(segData))
statusColNum
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData,2,skewness)
head(skewValues)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
## Train
segData <- subset(segmentationOriginal, Case == "Train")
View(segData)
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1-3)]
statusColNum <- grep("Status", names(segData))
statusColNum
## Transformations
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData,2,skewness)
head(skewValues)
head(skewValues)
skewness(segData$AngleCh1)
segData <- subset(segmentationOriginal, Case == "Train")
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1-3)]
statusColNum <- grep("Status", names(segData))
statusColNum
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData,2,skewness)
skewness(segData$AngleCh1)
segData$AngleCh1
segData$Case
data(segmentationOriginal)
segData <- subset(segmentationOriginal, Case == "Train")
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1-3)]
statusColNum <- grep("Status", names(segData))
statusColNum
## Transformations
segData$AngleCh1
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData,2,skewness)
head(skewValues)
segData$Cell
View(segData)
## Install Packages
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("corrplot")
install.packages("AppliedPredictiveModeling")
## Install Packages
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("corrplot")
install.packages("e1071")
install.packages("lattice")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
segData <- subset(segmentationOriginal, Case == "Train")
View(segData)
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1-3)]
statusColNum <- grep("Status", names(segData))
statusColNum
## Transformations
segData$AngleCh1
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData,2,skewness)
head(skewValues)
segData <- subset(segmentationOriginal, Case == "Train")
View(segData)
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1-3)]
statusColNum <- grep("Status", names(segData))
statusColNum
segData$AngleCh1
segData <- segData[, -statusColNum]
## Load Data
library(AppliedPredictiveModeling)
statusColNum
data(segmentationOriginal)
## Train
segData <- subset(segmentationOriginal, Case == "Train")
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <- segData[,-(1-3)]
data(segmentationOriginal)
## Train
segData <- subset(segmentationOriginal, Case == "Train")
View(segData)
CellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#Now remove the columns
segData <- segData[,-(1:3)]
statusColNum <- grep("Status", names(segData))
statusColNum
segData <- segData[, -statusColNum]
segData$AngleCh1
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData,2,skewness)
head(skewValues)
library(caret)
Ch1AreaTrans <- BoxCoxTrans(segData$AreaCh1)
Ch1AreaTrans
predict(Ch1AreaTrans, head(segData$AreaCh1))
pcaObject <- prcomp(segData, center=TRUE, scale.=TRUE)
percentVariance <- pcaObject$sd^2/sum(pcaObject$sd^2)*100
percentVariance[1:3]
head(pcaObject$x[,1:5])
head(pcaObject$rotation[,1:3])
trans <- preProcess(segData, method = c("BoxCox","center","scale","pca"))
trans
transformed <- predict(trans,segData)
head(transformed[,1:5])
correlations <- cor(segData)
dim(correlations)
correlations[1:4,1:4]
library(corrplot)
corrplot(correlations, order="hclust")
highCorr <- findCorrelation(correlations, cutoff=.75)
length(highCorr)
head(highCorr)
highCorr <- findCorrelation(correlations, cutoff=.75)
length(highCorr)
head(highCorr)
filteredSegData <- segData[,-highCorr]
head(carSubset)
